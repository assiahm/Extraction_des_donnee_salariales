import streamlit as st
from extract_par_gpt import extraire_texte_pdf, extraire_texte_image, analyser_fiche_paie_par_gpt
import tempfile
import pandas as pd
import re
import json
import matplotlib.pyplot as plt
from gpt_analyse import analyse_document_gpt

st.set_page_config(page_title="Extraction de Donn√©es Salariales", layout="wide")
st.title("üíº Extraction et Analyse de Donn√©es Salariales")

st.markdown("""
Bienvenue sur la plateforme d'extraction intelligente de documents financiers.
T√©l√©versez plusieurs fiches de paie ou documents similaires (PDF, JPEG, PNG) pour obtenir une analyse compl√®te de la situation financi√®re.
""")

fichiers = st.file_uploader(
    "T√©l√©versez un ou plusieurs fichiers PDF ou image (JPEG/PNG)",
    type=["pdf", "jpg", "jpeg", "png"],
    accept_multiple_files=True
)

textes_extraits = []
noms_fichiers = []

if fichiers:
    for fichier in fichiers:
        with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
            tmp_file.write(fichier.read())
            chemin_temp = tmp_file.name

        if fichier.name.endswith(".pdf"):
            texte = extraire_texte_pdf(chemin_temp)
        else:
            texte = extraire_texte_image(chemin_temp)

        textes_extraits.append(texte)
        noms_fichiers.append(fichier.name)

    # Affichage des textes extraits
    for nom, texte in zip(noms_fichiers, textes_extraits):
        st.markdown(f"#### Texte extrait de **{nom}** :")
        with st.expander("Afficher/Masquer le texte extrait"):
            st.text(texte)

    # Bouton pour analyser tous les fichiers d'un coup
    if st.button("Analyser tous les fichiers avec GPT"):
        resultats = []
        with st.spinner("üîé Analyse de tous les documents en cours..."):
            for texte in textes_extraits:
                resultat_json = analyser_fiche_paie_par_gpt(texte)
                resultats.append(resultat_json)
        st.success("‚úÖ Analyse termin√©e")

        # Parsing JSON
        donnees = []
        for r in resultats:
            try:
                donnees.append(json.loads(r))
            except Exception:
                pass  # Ignore les JSON invalides

        if not donnees:
            st.warning("Aucune donn√©e exploitable n'a √©t√© extraite.")
        else:
            df = pd.DataFrame(donnees)

            # Nettoyage des colonnes num√©riques
            def extract_number(val):
                if isinstance(val, str):
                    match = re.search(r"[\d]+([.,][\d]+)?", val.replace(" ", ""))
                    if match:
                        return float(match.group(0).replace(",", "."))
                elif isinstance(val, (int, float)):
                    return float(val)
                return None

            for col in ["salaire brut", "net √† payer", "net imposable"]:
                if col in df.columns:
                    df[col + "_num"] = df[col].apply(extract_number)

            st.dataframe(df)

            # Indicateurs financiers globaux
            col1, col2, col3 = st.columns(3)
            if "salaire brut_num" in df.columns:
                col1.metric("Salaire brut moyen", f"{df['salaire brut_num'].mean():,.2f} ‚Ç¨")
                col2.metric("Salaire brut total", f"{df['salaire brut_num'].sum():,.2f} ‚Ç¨")
            if "net √† payer_num" in df.columns:
                col3.metric("Net √† payer moyen", f"{df['net √† payer_num'].mean():,.2f} ‚Ç¨")

            # Analyse d'√©volution du salaire (stabilit√©)
            if "p√©riode de paie" in df.columns and "salaire brut_num" in df.columns:
                st.markdown("### üìà √âvolution du salaire brut")
                # Tenter de parser la p√©riode comme date, sinon afficher brute
                try:
                    df_sorted = df.copy()
                    df_sorted["p√©riode_dt"] = pd.to_datetime(df_sorted["p√©riode de paie"], errors="coerce")
                    df_sorted = df_sorted.sort_values("p√©riode_dt")
                    st.line_chart(
                        data=df_sorted,
                        x="p√©riode_dt",
                        y="salaire brut_num",
                        use_container_width=True
                    )
                    # Analyse simple de stabilit√©
                    if df_sorted["salaire brut_num"].std() < 0.05 * df_sorted["salaire brut_num"].mean():
                        st.success("Le salaire brut est stable sur la p√©riode analys√©e (√©cart-type faible).")
                    else:
                        st.warning("Le salaire brut varie significativement sur la p√©riode analys√©e.")
                except Exception:
                    st.info("Impossible d'analyser l'√©volution du salaire (format de date non reconnu).")

            # Analyse crois√©e GPT sur toutes les paires de documents
            if len(df) >= 2:
                st.markdown("## ü§ñ Analyse crois√©e GPT sur toutes les paires de documents")
                for i in range(len(df)):
                    for j in range(i + 1, len(df)):
                        fiche_paie = df.iloc[i].to_dict()
                        releve_bancaire = df.iloc[j].to_dict()
                        nom_fiche = noms_fichiers[i]
                        nom_releve = noms_fichiers[j]
                        with st.expander(f"Analyse fiche : {nom_fiche} / relev√© : {nom_releve}"):
                            with st.spinner(f"Analyse GPT {nom_fiche} vs {nom_releve}..."):
                                try:
                                    analyse = analyse_document_gpt(fiche_paie, releve_bancaire)
                                    st.write(analyse)
                                except Exception as e:
                                    st.error(f"Erreur GPT : {e}")

            # Export CSV
            st.download_button(
                "üì• T√©l√©charger les r√©sultats (CSV)",
                df.to_csv(index=False).encode("utf-8"),
                file_name="synthese_salariale.csv",
                mime="text/csv"
            )