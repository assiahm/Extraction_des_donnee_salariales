import openai
import os
import json
from dotenv import load_dotenv

load_dotenv()

client = openai.AzureOpenAI(
    api_key=os.getenv("AZURE_OPENAI_API_KEY"),
    api_version=os.getenv("AZURE_OPENAI_API_VERSION"),
    azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT")
)

deployment_name = os.getenv("AZURE_OPENAI_DEPLOYMENT")

def analyse_document_gpt(fiche_paie, releve_bancaire):
    system_message = (
        "Tu es un conseiller en cr√©dit qui analyse les revenus d‚Äôun individu √† partir de deux documents financiers : "
        "- Une fiche de paie "
        "- Un relev√© bancaire "
        "üéØ Ton objectif est de : "
        "- √âvaluer la coh√©rence des revenus d√©clar√©s (salaire net √† payer vs montant r√©ellement re√ßu) "
        "- V√©rifier si la personne a des revenus stables et v√©rifiables "
        "- Aider √† estimer sa capacit√© √† obtenir un cr√©dit "
        "‚úÖ D√©tail de ce que tu dois faire : "
        "- Compare les salaires nets : 'salaire_net' (fiche de paie) vs 'montant_recu' (relev√© bancaire) "
        "- V√©rifie que les p√©riodes/mois concordent "
        "- Donne un avis sur la fiabilit√© des revenus "
        "- Fournis une conclusion claire : "
        "   - 'revenus coh√©rents et stables' "
        "   - ou 'revenus incoh√©rents ou douteux' "
        "   - ou 'informations insuffisantes pour conclure'"
    )

    user_prompt = f"""
Voici les donn√©es extraites automatiquement :

Fiche de paie :
{json.dumps(fiche_paie, indent=2)}

Relev√© bancaire :
{json.dumps(releve_bancaire, indent=2)}

Merci de fournir une analyse d√©taill√©e et une conclusion claire.
"""

    response = client.chat.completions.create(
        model=deployment_name,
        messages=[
            {"role": "system", "content": system_message},
            {"role": "user", "content": user_prompt}
        ],
        temperature=0.2
    )

    return response.choices[0].message.content

def detecter_nom_prenom_par_gpt(donnees_extraites):
    prompt = f"""
Voici des donn√©es extraites d'un document (fiche de paie ou relev√© bancaire). Trouve le nom complet (pr√©nom + nom) de la personne √† qui ce document appartient.

Donn√©es :
{json.dumps(donnees_extraites, indent=2)}

R√©ponds uniquement par le nom complet, sans explication.
"""

    response = client.chat.completions.create(
        model=deployment_name,
        messages=[
            {"role": "user", "content": prompt}
        ],
        temperature=0.1
    )
    return response.choices[0].message.content.strip()
